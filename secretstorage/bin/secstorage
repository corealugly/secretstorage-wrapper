#!/usr/bin/env python3
from jeepney.integrate.blocking import DBusConnection
import secretstorage  #3.1.1
from pprint import pprint
import argparse
import json
import sys
import logging

class create_connection():
  def __enter__(self) -> DBusConnection:
    logging.info("open sock")
    self.connection = secretstorage.dbus_init()
    return self.connection

  def __exit__(self, exc_type, exc_value, traceback): # type: ignore
    logging.info("close sock")
    self.connection.sock.close()

class open_colletion():
  def __init__(self, collection):
      self.collection = collection
      self.default_status = None

  def __enter__(self):  #-> secretstorage.collection.Collection:
    logging.info("open collection")
    self.default_status = self.collection.is_locked()
    self.collection.unlock()
    #return self.connection

  def __exit__(self, exc_type, exc_value, traceback): # type: ignore
    logging.info("close collection")
    if self.default_status:  #if default open collection
        self.collection.lock()

def add(args):
  if args.app_name and args.password and args.attributes:
    attributes = json.loads(args.attributes)

    with create_connection() as conn:
      collection = secretstorage.get_default_collection(conn)
      #if (collection.is_locked()):
      #  logging.info("base locked:" + str(collection.is_locked()))
      #  collection.unlock()

      with open_colletion(collection):
        item = collection.create_item(args.app_name, attributes, args.password)

def get(args):
    attributes = json.loads(args.attributes)
    with create_connection() as conn:
      collection = secretstorage.get_default_collection(conn)
      #if (collection.is_locked()):
      #  logging.info("base locked:" + str(collection.is_locked()))
      #  collection.unlock()
      with open_colletion(collection):
        if args.app_name:
          items = [ item for item in collection.search_items(attributes) if item.get_label() == args.app_name ]
        else:
          items = [ item for item in collection.search_items(attributes) ]
        if args.type == "json":
            ret = [ { 'label': item.get_label(),
                      'attributes': item.get_attributes(),
                      'secret': item.get_secret().decode('utf-8')
                    } for item in items ]
            print(json.dumps(ret))

def remove(args):
    attributes = json.loads(args.attributes)
    with create_connection() as conn:
      collection = secretstorage.get_default_collection(conn)
      #if (collection.is_locked()):
      #  logging.info("base locked:" + str(collection.is_locked()))
      #  collection.unlock()

      with open_colletion(collection):
        items = [ item for item in collection.search_items(attributes) ]
        if len(items) > 0 and args.app_name:
            for item in items:
                if item.get_label() == args.app_name:
                    item.delete()
            return True
        if len(items) == 1:
            items[0].delete()
            return True
        if len(items) > 1:
            #logging.error("many matches found")
            if args.remove_all:
                for item in items:
                    item.delete()
                return
            ret = [ { 'label': item.get_label(),
                      'attributes': item.get_attributes()
                    } for item in items ]
            print(json.dumps(ret))
        if len(items) == 0:
            logging.error("not matches found")

def main():

  parser = argparse.ArgumentParser(description='secretstorage')
  subparsers = parser.add_subparsers()

  parser_add = subparsers.add_parser('add', help='add help')
  parser_add.add_argument('-a', '--app_name',type=str, help='app name', required=True)
  parser_add.add_argument('-p', '--password', type=str, help='password', required=True)
  parser_add.add_argument('-att', '--attributes', type=str, help='attributes as json', required=True)
  #parser_add.add_argument('-c', '--collection', type=str, help='collection name', required=False)
  parser_add.set_defaults(func=add)

  parser_get = subparsers.add_parser('get', help='get help')
  parser_get.add_argument( '-att', '--attributes', type=str, help='attributes as json', required=True)
  parser_get.add_argument( '-type', choices=('json',), help='type for return value', default='json', required=False)
  parser_get.add_argument('-a', '--app_name',type=str, help='app name', required=False)
  #parser_add.add_argument('-c', '--collection', type=str, help='collection name', required=False)
  parser_get.set_defaults(func=get)

  parser_remove = subparsers.add_parser('remove', help='remove help')
  parser_remove.add_argument('-att', '--attributes', type=str, help='attributes as json', required=True)
  parser_remove.add_argument('-a', '--app_name',type=str, help='app name', required=False)
  #parser_remove.add_argument('--remove_all', help='remove all find password', action='store_false', required=False)
  parser_remove.add_argument('--remove_all', help='remove all find password', action='store_true', required=False)
  #parser_add.add_argument('-c', '--collection', type=str, help='collection name', required=False)
  parser_remove.set_defaults(func=remove)

  args = parser.parse_args()
  if len(sys.argv) < 2:
    parser.print_help()
    exit(1)
  args.func(args)

if __name__ == "__main__":
  #logging.basicConfig(level=logging.INFO)
  #logging.basicConfig(filename='/tmp/secretstorage.log', filemode='w', level=logging.INFO)
  main()
